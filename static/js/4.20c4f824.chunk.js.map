{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","message","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","isAuth","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","validate","required","placeholder","dialogsItems","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"yGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,4B,sGCc/HC,EAXI,SAACC,GAEhB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACI,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACI,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,UCHvBC,EAJC,SAACT,GACb,OAAO,qBAAKG,UAAWC,IAAEC,OAAlB,SAA2BL,EAAMU,W,yCCqD7BC,EAhDC,SAACX,GAEb,IAAIY,EAAQZ,EAAMa,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYT,KAAMS,EAAET,KAAiBN,GAAIe,EAAEf,IAAZe,EAAEf,OAC1EgB,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAASV,QAASU,EAAEV,SAAcU,EAAElB,OAOnF,IAAKF,EAAMqB,OAAQ,OAAO,cAAC,IAAD,CAAUd,GAAI,WACxC,IAAMe,EAAcC,YAAiB,IAkB/BC,EAAsBC,YAAU,CAACC,KAAM,wBAAjBD,EAhBL,SAACzB,GACpB,OACI,uBAAM2B,SAAU3B,EAAM4B,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IACXC,SAAU,CAACC,IAAUX,GACrBd,KAAK,iBACL0B,YAAY,yBAEvB,8BACI,kDAShB,OACI,sBAAK/B,UAAWC,IAAEW,QAAlB,UACI,qBAAKZ,UAAWC,IAAE+B,aAAlB,SACKrB,IAEL,qBAAKX,UAAWC,IAAEe,SAAlB,SACI,8BAAMD,MAEV,cAACM,EAAD,CAAqBG,SAlCT,SAACS,GACjBpC,EAAMqC,YAAYD,EAAOE,uB,+CCd7BC,EAA6B,SAAC3B,GAAD,MAAY,CACzCS,OAAQT,EAAM4B,KAAKnB,S,OCeRoB,sBACXC,aAdkB,SAAC9B,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAGF,SAAC8B,GACtB,MAAO,CACHN,YAAa,SAACC,GACVK,EAASC,YAAmBN,UDNR,SAACO,GAAe,IACtCC,EADqC,uKAGnC,OAAKC,KAAK/C,MAAMqB,OACT,cAACwB,EAAD,eAAeE,KAAK/C,QADI,cAAC,IAAD,CAAUO,GAAI,eAHV,GACXyC,IAAMH,WAUtC,OAFqCH,YAAQH,EAARG,CAAoCI,KCE9DL,CAGd9B","file":"static/js/4.20c4f824.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2p_LR\",\"dialogsItems\":\"Dialogs_dialogsItems__GkEv6\",\"active\":\"Dialogs_active__29-EY\",\"messages\":\"Dialogs_messages__2GSRC\"};","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst DialogItem = (props) => {\r\n\r\n    let path = '/dialogs/' + props.id;\r\n\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return <div className={s.dialog}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport s from './Dialogs.module.css';\r\nimport Message from './Message/Message';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>);\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id}/>);\r\n    // let newMessageBody = state.newMessageBody;\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    if (!props.isAuth) return <Redirect to={\"/login\"}/>\r\n    const maxLength50 = maxLengthCreator(50);\r\n\r\n    const AddMessageForm = (props) => {\r\n        return (\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <Field component={TextArea}\r\n                           validate={[required, maxLength50]}\r\n                           name=\"newMessageBody\"\r\n                           placeholder='Enter your message'/>\r\n                </div>\r\n                <div>\r\n                    <button>Send</button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n\r\n    const AddMessageFormRedux = reduxForm({form: \"dialogAddMessageForm\"})(AddMessageForm)\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={\"/login\"}/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","import React from 'react';\r\nimport {sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect)\r\n(Dialogs)"],"sourceRoot":""}